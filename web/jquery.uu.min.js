/*!
 * jQuery UU-JS Plugin v0.0.2
 * 
 * http://netprotect.com
 * 
 * Copyright (c) 2014 NetProtect
 * Released under the MIT license
 */

!function($) {
  "use strict";
  $.UUJS = function(options) {
    function _generateServerUrl() {
      var url = plugin.settings.urls.getStatus, cacheIndex = 7;
      return "https:" === location.protocol ? url.replace(/^http:\/\//i, "https://") : url.slice(0, cacheIndex) + "c" + Math.floor(1e6 * Math.random() + 1) + "." + url.slice(cacheIndex);
    }
    function _getStatus(args) {
      var call;
      return call = $.ajax({
        url: _generateServerUrl(),
        data: args,
        dataType: "jsonp",
        cache: !1,
        timeout: plugin.settings.timeout,
        tryCount: 0,
        retryLimit: plugin.settings.retry,
        beforeSend: function() {
          publishEvent("onStart", []);
        },
        success: function(data) {
          publishEvent("onSuccess", [ data ]), cache = data;
        },
        always: function() {},
        error: function(xhr, status, error) {
          publishEvent("onFail", [ xhr, status, error ]), "timeout" === status && this.retryLimit > 0 && (this.tryCount++, 
          this.tryCount < this.retryLimit && $.ajax(this));
        }
      });
    }
    function _setStatus(args, url, callback) {
      var call;
      return call = $.ajax({
        url: url,
        data: args,
        async: !1,
        dataType: "jsonp",
        beforeSend: function() {
          publishEvent("onStart", []);
        },
        success: function(data) {
          publishEvent("onSuccess", [ data ]), "function" == typeof callback && callback(), 
          _getStatus();
        },
        error: function(xhr, status, error) {
          publishEvent("onFail", [ xhr, status, error ]);
        }
      });
    }
    var subscribeEvent, unsubscribeEvent, publishEvent, ip, defaults = {
      urls: {
        getStatus: "http://check.netprotect.com/get-status.js"
      },
      timeout: 3e3,
      retry: 3
    }, plugin = this, cache = null, handlers = {};
    plugin.settings = {}, subscribeEvent = function(event, callback) {
      if ("object" != typeof event) return handlers[event] || (handlers[event] = []), 
      handlers[event].push(callback), [ event, callback ];
      var res = [];
      for (var m in event) "function" == typeof event[m] && (res.push(m), subscribeEvent(m, event[m]));
    }, unsubscribeEvent = function(handler) {
      var t = handler[0], i = handlers[t].length - 1;
      if (handlers[t]) for (i; i >= 0; i -= 1) handlers[t][i] === handler[1] && handlers[t].splice(i, 1);
    }, publishEvent = function(event, args) {
      return null === handlers[event] ? !1 : ($.each(handlers[event], function() {
        this.apply(plugin, args || []);
      }), !0);
    }, ip = function() {
      return 0 === arguments.length ? Boolean(cache.ip) : void _setStatus({
        reactivate: !Boolean(arguments[0])
      }, _generateServerUrl());
    };
    var _init = function() {
      plugin.settings = $.extend({}, defaults, options);
    };
    return _init(), {
      subscribe: subscribeEvent,
      unsubscribe: unsubscribeEvent,
      publish: publishEvent,
      status: _getStatus,
      ip: ip
    };
  };
}($);